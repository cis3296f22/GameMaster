"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const GameBoardBuilder = __importDefault(require("./GameBoardBuilder"));
const discord_js = require("discord.js");
/**@class Allows for creation of the gameboard buttons using the GameBoardBuilder class as a super class */
class GameBoardButtonBuilder extends GameBoardBuilder.default {
    /**@constructor default constructor */
    constructor() {
        super(...arguments);
        this.buttonLabels = ['X', 'O'];
        this.buttonStyles = ['SECONDARY', 'PRIMARY', 'DANGER'];
        this.customEmojies = false;
        this.disableButtonsAfterUsed = false;
    }
    /**@constructor optional constructor to disable buttons after usage */
    withButtonsDisabledAfterUse() {
        this.disableButtonsAfterUsed = true;
        return this;
    }
    /**
     * optional constructor to determine the opponent.
     * @param {any} entity Who the opponent is.
     */
    withEntityPlaying(entity) {
        if (entity) {
            return super.withEntityPlaying(entity);
        }
        else {
            return this;
        }
    }
    /**
     * @constructor optional constructor to include custom emojies
     * @param {any} first Emoji for player 1
     * @param {any} second Emoji for player 2
     */
    withEmojies(first, second) {
        this.customEmojies = true;
        return super.withEmojies(first, second);
    }
    toMessageOptions() {
        return {
            content: this.title + this.state,
            components: [...Array(this.boardSize).keys()].map(row => new discord_js.MessageActionRow().addComponents([...Array(this.boardSize).keys()].map(col => this.createButton(row, col))))
        };
    }
    /**
     * @method Creates the buttons on discord.
     * @param {any} row The row index
     * @param {any} col The column index
     * @returns details about the button that was created.
     */
    createButton(row, col) {
        const button = new discord_js.MessageButton();
        const buttonIndex = row * this.boardSize + col;
        const buttonData = this.boardData[buttonIndex];
        if (buttonData !== 0) {
            if (this.customEmojies) {
                button.setEmoji(this.emojies[buttonData]);
            }
            else {
                button.setLabel(this.buttonLabels[buttonData - 1]);
            }
            if (this.disableButtonsAfterUsed) {
                button.setDisabled(true);
            }
        }
        else {
            button.setLabel(' ');
        }
        return button.setCustomId(buttonIndex.toString()).setStyle(this.buttonStyles[buttonData]);
    }
}
exports.default = GameBoardButtonBuilder;
