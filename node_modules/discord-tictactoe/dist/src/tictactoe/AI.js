"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const localize = __importDefault(require("../i18n/localize"));
const Player = require("./Player");
class AI {
    constructor() {
        this.id = 'AI';
        this.displayName = localize.default.__('game.ai');
    }
    operate(game) {
        //within-operate functions
        //
        function checkBoard(game, player) {
            var cell = -1;
            var found = false;
            //check rows for potential win
            for (var i = 0; i < game.boardSize; i++) {
                for (var j = 1; j < game.boardSize; j++) {
                    //if we have 2 in a row from expected player
                    var currentSpot = i * game.boardSize + j;
                    if (game.board[currentSpot - 1] == player && game.board[currentSpot - 1] == game.board[currentSpot]) {
                        //check if left is in bounds and unoccupied
                        if (game.board[currentSpot - 2] > (i * game.boardSize) && game.board[currentSpot - 2] == 0) {
                            cell = currentSpot - 2;
                        }
                        //check if right is in bounds and unoccupied
                        if (game.board[currentSpot + 1] < ((i + 1) * game.boardSize) && game.board[currentSpot + 1] == 0) {
                            cell = currentSpot + 1;
                        }
                    }
                }
            }
            //check columns for potential win
            for (var i = 1; i < game.boardSize; i++) {
                for (var j = 0; j < game.boardSize; j++) {
                    //if we have 2 in a columm from expected player
                    var currentSpot = j * game.boardSize + i;
                    if (game.board[currentSpot - (1 * game.boardSize)] == player && game.board[currentSpot - (1 * game.boardSize)] == game.board[currentSpot]) {
                        //check if left is in bounds and unoccupied
                        if (game.board[currentSpot - (2 * game.boardSize)] > (i * game.boardSize) && game.board[currentSpot - (2 * game.boardSize)] == 0) {
                            cell = currentSpot - (2 * game.boardSize);
                        }
                        //check if right is in bounds and unoccupied
                        if (game.board[currentSpot + (1 * game.boardSize)] < ((i + (1 * game.boardSize)) * game.boardSize) && game.board[currentSpot + (1 * game.boardSize)] == 0) {
                            cell = currentSpot + (1 * game.boardSize);
                        }
                    }
                }
            }

            return cell;
        }
        function defensive(game) {
            var player = game.currentPlayer;
            if (player == 1) {
                player = 2;
            }
            else {
                player = 1;
            }
            return checkBoard(game, player);
        }
        function offensive(game) {
            return checkBoard(game, game.currentPlayer);
        }

        /*RECURSIVE VERSION - while this works for a 3x3 board, gets exceptionally large. Instead, a more simplified version will be used.
         * if (!game.boardEmpty && game.emptyCellAmount <= 9) {
            return AI.minimax(game.clone(), game.emptyCellAmount, game.currentPlayer);
        }
        else {*/

        //cell set to -1 as default
        var cell = -1;
        //play defensively first
        if ((cell = defensive(game)) == -1) {
            if ((cell = offensive(game)) == -1) {
                //randomly guess if no offensive or defensive options are available
                do {
                    cell = Math.floor(Math.random() * (game.boardSize ** 2));
                } while (game.board[cell] != 0);
            }
        }
        console.log(cell);
        return { move: cell, score: 0 };
        //}
    }
    toString() {
        return this.displayName;
    }
    static minimax(game, depth, player) {
        const winner = game.winner;
        const type = AI.getComputeType(player);
        let best;
        if (type === 1) {
            best = { score: -1000 };
        }
        else {
            best = { score: +1000 };
        }
        if (depth === 0 || winner) {
            return { score: AI.getComputeType(winner) };
        }
        game.board.forEach((cell, index) => {
            if (cell === 0) {
                game.updateBoard(player, index);
                const deep = this.minimax(game, depth - 1, (0, Player.getOpponent)(player));
                game.updateBoard(0, index);
                deep.move = index;
                if (type === 1) {
                    if (deep.score > best.score) {
                        best = deep;
                    }
                }
                else {
                    if (deep.score < best.score) {
                        best = deep;
                    }
                }
            }
        });
        return best;
    }
    static getComputeType(player) {
        if (player === 1) {
            return -1;
        }
        else if (player === 2) {
            return 1;
        }
        else {
            return 0;
        }
    }
}
exports.default = AI;
