"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const EventHandler = __importDefault(require("./bot/EventHandler"));
const TicTacToeBot = __importDefault(require("./bot/TicTacToeBot"));
const localize = __importDefault(require("./i18n/localize"));
const discord_js = require("discord.js");
/**@class creates and handles TicTacToe on the bot */
class TicTacToe {
    /**
     * @constructor default constructor
     * @param {any} config the configuration details needed to continue.
     */
    constructor(config) {
        this.config = config !== null && config !== void 0 ? config : {};
        this.eventHandler = new EventHandler.default();
        this.bot = new TicTacToeBot.default(this.config, this.eventHandler);
        localize.default.loadFromLocale(this.config.language);
    }
    /**
     * @method logs in to the server to be active.
     * @param {any} token The token to run on the server.
     */
    login(token) {
        return __awaiter(this, void 0, void 0, function* () {
            const loginToken = token !== null && token !== void 0 ? token : this.config.token;
            if (!loginToken) {
                throw new Error('Bot token needed to start Discord client.');
            }
            else if (!this.config.command && !this.config.textCommand) {
                throw new Error('Game slash or text command needed to start Discord client.');
            }
            const client = new discord_js.Client({
                intents: [
                    discord_js.Intents.FLAGS.GUILDS,
                    discord_js.Intents.FLAGS.GUILD_MESSAGES,
                    discord_js.Intents.FLAGS.GUILD_MESSAGE_REACTIONS
                ]
            });
            yield client.login(loginToken);
            this.bot.attachToClient(client);
        });
    }
    /**
     * @method attaches this bot to the client
     * @param {any} client The client being added to the bot.
     */
    attach(client) {
        this.bot.attachToClient(client);
    }
    /**
     * @method allows for message handling
     * @param {any} message The message being handled
     */
    handleMessage(message) {
        this.bot.handleMessage(message);
    }
    /**
     * @method Allows for interaction handling
     * @param {any} interaction The interaction being handled
     */
    handleInteraction(interaction) {
        this.bot.handleInteraction(interaction);
    }
    /**
     * @method registers an event to a specific listern
     * @param {any} eventName The even being registered
     * @param {any} listener The listener waiting for the event.
     */
    on(eventName, listener) {
        this.eventHandler.registerListener(eventName, listener);
    }
}
module.exports = TicTacToe;
